# Generated by Django 5.0.6 on 2024-11-18 05:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.CharField(blank=True, max_length=150, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('qualification', models.CharField(blank=True, max_length=500, null=True)),
                ('location', models.CharField(blank=True, max_length=500, null=True)),
                ('language', models.CharField(blank=True, max_length=500, null=True)),
                ('gender', models.CharField(blank=True, max_length=30, null=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('experience', models.CharField(blank=True, max_length=100, null=True)),
                ('expertise', models.TextField(blank=True, null=True)),
                ('u_id', models.CharField(blank=True, max_length=15, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photo/')),
                ('modal_image', models.ImageField(blank=True, null=True, upload_to='profile_photo/')),
                ('flag_counter', models.BooleanField(default=False)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('is_default', models.BooleanField(default=False)),
                ('is_block', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groupOf', to='auth.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userOf', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Groups',
                'db_table': 'user_groups',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user', related_query_name='user', through='user_management.UserGroups', to='auth.group', verbose_name='groups'),
        ),
        migrations.CreateModel(
            name='UserSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=1000, null=True)),
                ('query_created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('query_status', models.IntegerField(blank=True, default=0, null=True)),
                ('reply_status', models.IntegerField(blank=True, default=0, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='USERSUPPORT', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSupportComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='support')),
                ('comment_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('support', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='USERComments', to='user_management.usersupport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='USERSUPPORTComments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
